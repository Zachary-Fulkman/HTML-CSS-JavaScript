** start of Html **

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cash Register</title>
</head>
<body>
    <input id ="cash"></input>
<div id = "change-due"></div>
<button id="purchase-btn"></button>
<script src="./script.js"></script>
</body>
</html>

** end of Html **


** start of Javascript **

let price = 19.5;
let cid = [
  ["PENNY", 0.5], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 0], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]
];

const cash = document.getElementById("cash");
const change = document.getElementById("change-due");
const purchase = document.getElementById("purchase-btn");

let currency = [
  ['PENNY', 0.01],
  ['NICKEL', 0.05],
  ['DIME', 0.1],
  ['QUARTER', 0.25],
  ['ONE', 1],
  ['FIVE', 5],
  ['TEN', 10],
  ['TWENTY', 20],
  ['ONE HUNDRED', 100]
];

purchase.addEventListener("click", () => {
  const cashValue = parseFloat(cash.value);
  const changeDue = parseFloat((cashValue - price).toFixed(2));

  if (cashValue < price) {
    alert("Customer does not have enough money to purchase the item");
    return;
  } 

  if (cashValue === price) {
    change.innerText = "No change due - customer paid with exact cash";
    return;
  }

  const changeResult = getChange(changeDue, cid);
  if (changeResult.status === "INSUFFICIENT_FUNDS" || changeResult.status === "CLOSED") {
    change.innerText = `Status: ${changeResult.status} ${formatChange(changeResult.change, changeResult.status)}`;
  } else {
    let changeText = `Status: OPEN ${formatChange(changeResult.change, changeResult.status)}`;
    change.innerText = changeText.trim();
  }
});

const getChange = (changeDue, cid) => {
  let totalCid = parseFloat(cid.reduce((sum, [_, amount]) => sum + amount, 0).toFixed(2));

 
  if (totalCid === changeDue) {
    return { status: "CLOSED", change: [...cid] };
  }

  
  if (totalCid < changeDue) {
    return { status: "INSUFFICIENT_FUNDS", change: [] };
  }

 
  let changeArray = [];
  let restOfChange = changeDue;

  for (let i = currency.length - 1; i >= 0; i--) {
    let unit = currency[i][0];
    let unitValue = currency[i][1];
    let unitDrawer = cid[i][1];

    if (unitValue <= restOfChange && unitDrawer > 0) {
      let amountFromUnit = 0;
      while (restOfChange >= unitValue && unitDrawer > 0) {
        restOfChange = parseFloat((restOfChange - unitValue).toFixed(2));
        unitDrawer -= unitValue;
        amountFromUnit += unitValue;
      }
      if (amountFromUnit > 0) {
        changeArray.push([unit, parseFloat(amountFromUnit.toFixed(2))]);
      }
    }
  }

 
  if (restOfChange > 0) {
    return { status: "INSUFFICIENT_FUNDS", change: [] };
  }

  return { status: "OPEN", change: changeArray };
};


const formatChange = (changeArray, status) => {
 
  let filteredChangeArray = status === "CLOSED" 
    ? changeArray.filter(([_, amount]) => amount > 0) 
    : changeArray;
  
  
  return filteredChangeArray
    .sort((a, b) => currency.findIndex(curr => curr[0] === b[0]) - currency.findIndex(curr => curr[0] === a[0]))
    .map(([unit, amount]) => `${unit}: $${amount.toFixed(2)}`)
    .join(" ");
};
